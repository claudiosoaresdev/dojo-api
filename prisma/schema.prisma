// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid()) @db.Uuid()
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  bio               String?
  profilePictureUrl String?  @map("profile_picture_url")
  coverPhotoUrl     String?  @map("cover_photo_url")
  email             String   @unique
  isEmailVerified   Boolean? @default(false) @map("is_email_verified")
  password          String?
  followersCount    Int      @default(0) @map("followers_count")
  followingCount    Int      @default(0) @map("followings_count")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  followers        FollowerRelationship[]   @relation("UserFollowers")
  followings       FollowerRelationship[]   @relation("UserFollowings")
  initiatedFriends FriendshipRelationship[] @relation("UserInitiatedFriends")
  acceptedFriends  FriendshipRelationship[] @relation("UserAcceptedFriends")

  @@map("users")
}

model FollowerRelationship {
  id          String   @id @default(uuid()) @db.Uuid()
  followerId  String   @db.Uuid()
  followingId String   @db.Uuid()
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follower_relationships")
}

model FriendshipRelationship {
  id          String   @id @default(uuid()) @db.Uuid()
  initiatorId String   @db.Uuid()
  acceptorId  String   @db.Uuid()
  createdAt   DateTime @default(now()) @map("created_at")

  initiator User @relation("UserInitiatedFriends", fields: [initiatorId], references: [id])
  acceptor  User @relation("UserAcceptedFriends", fields: [acceptorId], references: [id])

  @@unique([initiatorId, acceptorId])
  @@map("friendship_relationships")
}
